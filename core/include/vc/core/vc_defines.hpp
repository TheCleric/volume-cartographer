/**
 * @file vc_defines.hpp
 * @author Seth Parker
 * @date 7/7/15
 *
 * @brief Commonly used types, enumerations, and functions
 *
 * @ingroup Core
 */
#pragma once

#include <array>
#include <ctime>
#include <iostream>

#include <itkMesh.h>
#include <itkPointsLocator.h>
#include <itkQuadEdgeMesh.h>
#include <itkQuadEdgeMeshExtendedTraits.h>
#include <itkTriangleCell.h>
#include <opencv2/core.hpp>

/**@{*/
/** @brief Volume Package version generated by this release */
static constexpr int VOLPKG_VERSION_LATEST = 3;

namespace volcart
{
/** Generic vertex structure */
struct Vertex {
    double x, y, z, nx, ny, nz, s, t;
    int r, g, b, faceCount;
};

/** Generic triangular face structure */
struct Cell {
    uint64_t v1, v2, v3;
    Cell() : v1{}, v2{}, v3{} {}
    Cell(uint64_t p1, uint64_t p2, uint64_t p3) : v1{p1}, v2{p2}, v3{p3} {}
};

/** Aspect ratio structure */
struct Ratio {
    Ratio() : width(1), height(1), aspect(1) {}
    double width, height, aspect;
};
/**@}*/

/** @name ITK Mesh */
/**@{*/
/** ITK Vertex/Pixel base properties */
using ITKPixel = itk::Vector<double, 3>;

/** ITK Mesh base properties */
using ITKMeshTraits =
    itk::DefaultStaticMeshTraits<ITKPixel, 3, 3, double, double, ITKPixel>;

/** ITK Mesh */
using ITKMesh = itk::Mesh<ITKPixel, 3, ITKMeshTraits>;

/** ITK Mesh Vertex */
using ITKPoint = ITKMesh::PointType;

/** ITK Mesh Generic Face */
using ITKCell = ITKMesh::CellType;

/** ITK Mesh Triangular Face */
using ITKTriangle = itk::TriangleCell<ITKCell>;

/** ITK Mesh Point Container */
using ITKPointsContainer = ITKMesh::PointsContainer;

/** ITK Mesh Point Locator */
using ITKPointsLocator = itk::PointsLocator<ITKPointsContainer>;

/** ITK Mesh Point Iterator */
using ITKPointIterator = ITKPointsContainer::ConstIterator;

/** ITK Mesh Cell Iterator */
using ITKCellIterator = ITKMesh::CellsContainer::Iterator;

/** ITK Mesh Vertex ID In Cell Iterator */
using ITKPointInCellIterator = ITKCell::PointIdIterator;
/**@}*/

/** @name ITK QuadEdgeMesh */
/**@{*/

/** ITK QEM Vertex/Pixel base properties */
using QuadPixel = std::array<double, 3>;

/** ITK QEM Cell Pixel base properties */
using QuadVector = itk::Vector<double, 3>;

/** ITK QEM Mesh base properties */
using QuadTraits = itk::QuadEdgeMeshExtendedTraits<
    QuadVector,
    3,
    2,
    double,
    double,
    QuadVector,
    bool,
    bool>;

/** ITK Quad-Edge Mesh
 *
 * http://www.insight-journal.org/browse/publication/122
 */
using QuadMesh = itk::QuadEdgeMesh<double, 3, QuadTraits>;

/** ITK QEM Vertex */
using QuadPoint = QuadMesh::PointType;

/** ITK QEM Vertex ID */
using QuadPointIdentifier = QuadMesh::PointIdentifier;

/** ITK QEM Generic Face */
using QuadCell = QuadMesh::CellType;

/** ITK QEM Cell ID */
using QuadCellIdentifier = QuadMesh::CellIdentifier;

/** ITK QEM Triangular Face */
using QuadTriangleCell = itk::TriangleCell<QuadCell>;

/** ITK QEM Point Container */
using QuadPointsContainer = QuadMesh::PointsContainer;

/** ITK QEM Point Container Iterator */
using QuadPointsInMeshIterator = QuadMesh::PointsContainer::ConstIterator;

/** ITK QEM Face Iterator */
using QuadCellIterator = QuadMesh::CellsContainer::Iterator;

/** ITK QEM Vertex ID In Cell Iterator */
using QuadPointsInCellIterator = QuadCell::PointIdIterator;

/** ITK QEM Edge */
using QuadMeshQE = QuadMesh::QEType;

/** ITK QEM Geometry Iterator */
using QuadMeshIteratorGeom = QuadMeshQE::IteratorGeom;

/** ITK QEM Edge List */
using QuadEdgeList = QuadMesh::EdgeListType;

/** ITK QEM Edge List Pointer */
using QuadEdgeListPointer = QuadMesh::EdgeListPointerType;

/** ITK QEM Edge List Iterator */
using QuadEdgeListIterator = QuadEdgeList::iterator;
/** @}*/

/**@{*/
/** UV Map Origin Type */
using Origin = cv::Vec2d;

/** Top-left UV Origin */
#define VC_ORIGIN_TOP_LEFT volcart::Origin(0, 0)
/** Top-right UV Origin */
#define VC_ORIGIN_TOP_RIGHT volcart::Origin(1, 0)
/** Bottom-left UV Origin */
#define VC_ORIGIN_BOTTOM_LEFT volcart::Origin(0, 1)
/** Bottom-right UV Origin */
#define VC_ORIGIN_BOTTOM_RIGHT volcart::Origin(1, 1)

/** Null/Undefined UV Mapping */
#define VC_UVMAP_NULL_MAPPING cv::Vec2d(-1, -1)
/**@}*/

/**@{*/
/** Defines an empty texture to be -1 */
constexpr static double TEXTURE_NO_VALUE = -1.0;

/** @brief Composite Texturing Filters */
enum class CompositeOption {
    Intersection,
    NonMaximumSuppression,
    Maximum,
    Minimum,
    MedianAverage,
    Median,
    Mean
};

/** @brief Neighborhood Directional Filtering Options
 *
 * Bidirectional: Consider data in both the positive and negative normal
 * direction \n
 * Positive: Only consider data in the positive normal direction \n
 * Negative: Only consider data in the negative normal direction \n
 */
enum class DirectionOption { Bidirectional, Positive, Negative };
/**@}*/

/**@{*/
/** @brief Volume Package Read Only Error */
inline int ErrReadonly()
{
    std::cerr << "ERROR: VolPkg is set to read-only. Cannot write to file"
              << std::endl;
    return EXIT_FAILURE;
}

/** @brief Returns a string representation of the current date and time
 *
 * Format: YYYYMMDDHMS
 */
inline std::string DateTime()
{
    time_t now = std::time(nullptr);
    struct tm tstruct {
    };
    std::array<char, 80> buf{};
    tstruct = *std::localtime(&now);
    std::strftime(buf.data(), buf.size(), "%Y%m%d%H%M%S", &tstruct);
    return std::string(buf.data());
}
/**@}*/
}  // namespace volcart
