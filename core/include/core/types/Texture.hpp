// VC Texture
// Object to store texture information generated by the algorithms in
// vc_texturing
// Created by Seth Parker on 10/20/15.
#pragma once

#include <boost/filesystem/path.hpp>
#include <opencv2/core.hpp>

#include "core/types/Metadata.hpp"
#include "core/types/PerPixelMap.hpp"
#include "core/types/UVMap.hpp"

namespace volcart
{
class Texture
{
public:
    Texture();
    explicit Texture(boost::filesystem::path path);

    // Get metadata
    volcart::Metadata metadata() const { return metadata_; }

    std::string id() const { return metadata_.get<std::string>("id"); }
    int width() const { return width_; }
    int height() const { return height_; }
    size_t numberOfImages() const { return images_.size(); }
    bool hasImages() const { return !images_.empty(); }
    bool hasMap() const { return ppm_.initialized(); }

    // PPM
    void setPPM(const PerPixelMap& m) { ppm_ = m; }
    const PerPixelMap& ppm() const { return ppm_; }
    PerPixelMap& ppm() { return ppm_; }

    // Get UV Map
    const volcart::UVMap& uvMap() const { return ppm_.uvMap(); }
    volcart::UVMap& uvMap() { return ppm_.uvMap(); }

    // Get/Add Texture Image
    cv::Mat image(int id) const { return images_[id]; }
    void addImage(cv::Mat image);

    // Return the intensity for a Point ID
    double intensity(int pointId, int imageId = 0);

    // Extra Metadata
    cv::Mat mask() { return ppm_.mask(); }

private:
    volcart::Metadata metadata_;
    boost::filesystem::path path_;
    int width_, height_;
    std::vector<cv::Mat> images_;
    PerPixelMap ppm_;
};
}
