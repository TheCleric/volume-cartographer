-----------------------------------------
---- Volume Cartographer v2.0.0 ---------
-----------------------------------------


---- Step 1: Package and analyze --------
    All samples must be packaged into our volume package format and run through vc_scalpel for analysis:

        vc_packager -sp [path of folder containing slices] -of [identifying name of volume package]
        vc_scalpel [volume package].volpkg/



---- Step 2: Draw starting paths --------
    While vc_scalpel is running, you can go ahead and draw some paths on the images. The slice index number is zero-indexed so you typically use index 2, but you can make it go higher if there are no clear paths on slice 002:

        vc_pathgen [volume package].volpkg/ [slice index number]

    Be careful not to click inside the image area until you are ready to draw a path as it's really greedy about picking up clicks.



---- Step 3: Run segmentation -------------
    Run segmentation with your generated path:
        vc_segment --seg [Segmentation ID #] --volpkg [volpkg.volpkg/] 

    There are three optional arguments, --startIndex [n], --stopOffset [n], --gravity [1-10]:
        --startIndex: specify the slice index n that you want to start a segmentation from. Defaults to the highest Z-index already in the segmentation.
        --stopOffset: stops the simulation after it has gone through n number of slices.
        --gravity sets the gravity vector to 1/n of its original strength. Adjust to higher values if simulation ends after very few iterations. Default is 2.



---- Step 4: Create a textured mesh -----
    Texture the resulting mesh using some sort of texturing filter: 
        vc_texture [volpkg.volpkg/] [Segmentation ID #] radius texture-method sample-direction

    This will output a textured mesh called "textured.ply" inside of the segmentation's subdirectory. vc_texture requires all arguments to be present and in the specified order.

    Arguments:
        radius: radius in pixels of ellipsoid used for complex filtering
        texture-method: integer corresponding to a texture method in the following list
                0 = Intersection
                1 = Non-Maximum Suppression*
                2 = Minimum
                3 = Median w/ Averaging*
                4 = Median w/o Averaging
                5 = Mean
        sample-direction: integer corresponding to the direction in which to limit the texture search
                0 = Omnidirectional - search along the normal in the positive and negative direction
                1 = Positive        - search along the normal in the positive direction only
                2 = Negative        - search along the normal in the negative direction only



---- Step 6: Enhance the mesh -----------
    If the textured mesh is a little dark, use vc_meshnorm to normalize its texture values:

        vc_meshnorm [textured mesh name].ply

    This will produce a file "[textured mesh name]_norm.ply"



---- Step 7: Visualize the mesh ---------
    To see the mesh projected onto the original slices, use vc_sliceProjection:

        vc_sliceProjection [pathname]_segmented.ply [volume package].volpkg/ [path to output directory]/

    This will produce PNGs with the mesh projected onto the slices and an MP4 of those projections for easy review [Requires ffmpeg be installed to PATH]



---- NOTES ------------------------------
    â€¢ In all circumstances where you have to give the volume package name to a program, I highly suggest using "[name].volpkg/" making sure to include the trailing slash. Some of the programs need the slash to be there.
-----------------------------------------


=========================================
Using VC.app for segmentation
=========================================

New in Volume Cartographer v2.0.0 is an OSX app for segmenting volumes: VC.app. This application completely replaces Steps 2 and 3 in the command line workflow and will, in the future, incorporate most of the command line functionality in the current VC workflow.

[Documentation Coming Soon...]