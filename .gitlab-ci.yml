stages:
    - test
    - lint
    - docs
    - collect
    - deploy
    - release

variables:
    MACOSX_DEPLOYMENT_TARGET: "11.3"

### Prototype build jobs ###
.build_script: &build_script
    - mkdir -p build/
    - cd build/
    - echo $CMAKE_CMD
    - $CMAKE_CMD
    - ninja

.test_script: &test_script
    - ctest -V

.build:
    variables:
        EXTRA_CMAKE_FLAGS: ""
    before_script:
        - export CMAKE_CMD="cmake -GNinja $EXTRA_CMAKE_FLAGS .."
    script:
        - *build_script
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
          when: never
        - if: '$CI_COMMIT_BRANCH'

.build_and_test:
    extends: .build
    script:
        - *build_script
        - *test_script
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
          when: never
        - if: '$CI_COMMIT_BRANCH'
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/Testing/Temporary/
        when: always
        expire_in: 2 weeks

### Debian ###
test:debian:static:
    extends: .build_and_test
    stage: test
    needs: []
    image: ghcr.io/educelab/ci-docker:11_v2.static
    variables:
        CMAKE_PREFIX_PATH: "/usr/local/Qt-6.4.2/"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DVC_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DVC_DEVELOPER_WARNINGS=ON"
    tags:
        - docker

test:debian:dynamic:
    extends: .build_and_test
    stage: test
    needs: []
    image: ghcr.io/educelab/ci-docker:11_v2.dynamic
    variables:
        CMAKE_PREFIX_PATH: "/usr/local/Qt-6.4.2/"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DBUILD_SHARED_LIBS=ON -DVC_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DVC_DEVELOPER_WARNINGS=ON"
    tags:
        - docker

### macOS ###
test:macos:static:
    extends: .build_and_test
    stage: test
    needs: []
    variables:
        CMAKE_PREFIX_PATH: "/usr/local/educelab/vc-deps-1.7-static-debug:/usr/local/Qt/6.4.2/macos/lib/cmake/"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DVC_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DVC_DEVELOPER_WARNINGS=ON"
    tags:
        - macos
        - test

test:macos:dynamic:
    extends: .build_and_test
    stage: test
    needs: []
    variables:
        CMAKE_PREFIX_PATH: "/usr/local/educelab/vc-deps-1.7-dynamic-debug:/usr/local/Qt/6.4.2/macos/lib/cmake/"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DBUILD_SHARED_LIBS=ON -DVC_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DVC_DEVELOPER_WARNINGS=ON"
    tags:
        - macos
        - test

### Extra Checks and Tests ###
lint:clang-format:
    stage: lint
    needs: []
    before_script:
        - git fetch --all
    script:
        - utils/scripts/clang-format.py --print-output
    allow_failure: true
    tags:
        - macos
        - lint
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
          when: never
        - if: '$CI_COMMIT_BRANCH'

### Documentation ###
pages:
    stage: docs
    needs: []
    image: ghcr.io/educelab/ci-docker:11_v2.static
    before_script:
        - apt-get -y update
        - apt-get install --fix-missing --fix-broken -y doxygen graphviz
    script:
        - mkdir -p build/
        - mkdir -p public/
        - cmake -S . -B build/ -DVC_BUILD_DOCS=ON -DVC_BUILD_APPS=OFF -DVC_BUILD_UTILS=OFF
        - cmake --build build/ --target docs
        - mv build/docs/html/ public/docs/
    artifacts:
        paths:
            - public
        expire_in: 30 days
    allow_failure: true
    tags:
        - docker
    rules:
        - if: '$CI_COMMIT_BRANCH == "develop"'

### Collect & Deploy ###
.deploy_variables: &deploy_variables
    - export DATETIME=$(date '+%s')
    - export VERSION=$(utils/scripts/version-gen.sh)
    - export VERSHORT=$(utils/scripts/version-gen.sh --short)
    - export SHA=$(git log -1 --format="%h")

.rules:release: &rules_release
    - if: '$CI_COMMIT_TAG =~ /^v.*$/'

.rules:nightly:collect: &rules_nightly_collect
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$BUILD_NIGHTLY == "true"'

.rules:nightly:deploy: &rules_nightly_deploy
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "develop" && $BUILD_NIGHTLY == "true"'

.collect:source:
    variables:
        TARNAME: "source.tar.gz"
    script:
        - git archive --format=tar.gz -o ${TARNAME} HEAD
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - ./*.tar.gz
        expire_in: 1 day
    tags:
        - source

collect:source:release:
    extends:
        - .collect:source
    stage: collect
    needs: []
    rules:
        *rules_release
    before_script:
        - *deploy_variables
        - export TARNAME="VC-${VERSHORT}-source.tar.gz"

collect:source:nightly:
    extends:
        - .collect:source
    stage: collect
    needs: []
    rules:
        *rules_nightly_collect
    before_script:
        - *deploy_variables
        - export TARNAME="VC-${DATETIME}-${VERSHORT}.${SHA}-source.tar.gz"

.macos_move_package: &macos_move_package
    - ninja package
    - mv VC*.dmg ../

.collect:package:macos:
    extends: .build
    variables:
        CMAKE_PREFIX_PATH: "/usr/local/Qt/6.4.2/macos/lib/cmake/"
        EXTRA_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DVC_PREBUILT_LIBS=ON -DVC_BUILD_ACVD=ON -DVC_BUILD_TESTS=OFF"
        MACOSX_DEPLOYMENT_TARGET: "12.3"
    before_script:
        - export VC_DEPS_PATH="$CI_PROJECT_DIR/vc-deps"
        - export CMAKE_CMD="cmake -GNinja $EXTRA_CMAKE_FLAGS .."
        - git submodule update --init
        - cd vc-deps/
        - mkdir -p build/
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_MESSAGE=NEVER -DVCDEPS_BUILD_ACVD=OFF ..
        - ninja
        - cd ../../
    script:
        - *build_script
        - *macos_move_package
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - ./*.dmg
        expire_in: 1 day
    tags:
        - macos
        - deploy

collect:binaries:macos:release:
    extends:
        - .collect:package:macos
    stage: collect
    rules:
        *rules_release

collect:binaries:macos:nightly:
    extends:
        - .collect:package:macos
    stage: collect
    rules:
        *rules_nightly_collect
    variables:
        EXTRA_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DVC_VERSION_DATESTAMP=ON -DVC_PREBUILT_LIBS=ON -DVC_BUILD_ACVD=ON -DVC_BUILD_TESTS=OFF"

release:create:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:edge
    needs: ["collect:source:release", "collect:binaries:macos:release"]
    rules:
        *rules_release
    script:
        - >
            release-cli create
            --name "$CI_COMMIT_TAG"
            --description "Auto-created release $CI_COMMIT_TAG"
            --tag-name "$CI_COMMIT_TAG"
            --ref "$CI_COMMIT_TAG"
    tags:
        - docker
