stages:
    - test
    - lint
    - docs
    - collect
    - deploy

### Prototype build jobs ###
.build_script: &build_script
    - mkdir -p build/
    - cd build/
    - echo $CMAKE_CMD
    - $CMAKE_CMD
    - ninja

.test_script: &test_script
    - ctest -V

.build:
    variables:
        EXTRA_CMAKE_FLAGS: ""
    before_script:
        - export CMAKE_CMD="cmake -GNinja $EXTRA_CMAKE_FLAGS .."
    script:
        - *build_script

.build_and_test:
    extends: .build
    script:
        - *build_script
        - *test_script
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/Testing/Temporary/
        when: always
        expire_in: 4 weeks

### Debian ###
test:debian:static:
    extends: .build_and_test
    stage: test
    needs: []
    image: volcart/vcbuilder-debian:10_v1.static
    variables:
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON"
    tags:
        - docker

test:debian:dynamic:
    extends: .build_and_test
    stage: test
    needs: []
    image: volcart/vcbuilder-debian:10_v1.dynamic
    variables:
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DBUILD_SHARED_LIBS=ON"
    tags:
        - docker

test:debian:experimental:
    extends: .build_and_test
    stage: test
    needs: []
    image: volcart/vcbuilder-debian:10_v1.experimental
    variables:
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DVC_BUILD_EXPERIMENTAL=ON"
    tags:
        - docker

### macOS ###
test:macos:static:
    extends: .build_and_test
    stage: test
    needs: []
    variables:
        Qt5_DIR: "/usr/local/opt/qt5/lib/cmake/Qt5"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON"
    tags:
        - test
        - osx
        - homebrew
        - qt5
        - ninja

test:macos:dynamic:
    extends: .build_and_test
    stage: test
    needs: []
    variables:
        Qt5_DIR: "/usr/local/opt/qt5/lib/cmake/Qt5"
        EXTRA_CMAKE_FLAGS: "-DVC_BUILD_ACVD=ON -DBUILD_SHARED_LIBS=ON"
    tags:
        - test
        - osx
        - homebrew
        - qt5
        - ninja

### Extra Checks and Tests ###
lint:clang-format:
    stage: lint
    needs: []
    before_script:
        - git fetch --all
    script:
        - utils/scripts/clang-format.py --print-output
    allow_failure: true
    tags:
        - clang-format
        - osx

lint:clang-tidy:
    stage: lint
    needs: []
    before_script:
        - git fetch --all
        - mkdir -p build/
        - cd build/
        - cmake -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/qt5/ -GNinja -DVC_BUILD_ACVD=ON ..
        - cd ..
    script:
        - echo $CI_BUILD_REF_NAME $CI_BUILD_STAGE
        - utils/scripts/clang-tidy.py --print-output
    allow_failure: true
    tags:
        - clang-tidy
        - osx

### Documentation ###
doxygen:
    stage: docs
    needs: []
    variables:
        Qt5_DIR: "/usr/local/opt/qt5/lib/cmake/Qt5"
    script:
        - mkdir -p build/
        - cd build/
        - cmake -DVC_BUILD_DOC=ON -GNinja ..
        - ninja doc
        - cd doc/latex/
        - make
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/doc/html/*
            - build/doc/latex/*.pdf
        expire_in: 5 days
    allow_failure: true
    tags:
        - doxy
        - test

### Collect & Deploy ###
.deploy_variables: &deploy_variables
    - export DATETIME=$(date '+%Y%m%d')
    - export VERSION=$(utils/scripts/version-gen.sh)
    - export VERSHORT=$(utils/scripts/version-gen.sh --short)
    - export SHA=$(git log -1 --format="%h")

.rules:release: &rules_release
    - if: '$CI_COMMIT_TAG =~ /^v.*$/'

.rules:nightly: &rules_nightly
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "develop" && $BUILD_NIGHTLY == "true"'

.collect:source:
    variables:
        TARNAME: "source.tar.gz"
    script:
        - git archive --format=tar.gz -o ${TARNAME} HEAD
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - ./*.tar.gz
        expire_in: 1 day
    tags:
        - source

collect:release:source:
    extends:
        - .collect:source
    stage: collect
    needs: []
    rules:
        *rules_release
    before_script:
        - *deploy_variables
        - export TARNAME="VC-${VERSHORT}-source.tar.gz"

collect:nightly:source:
    extends:
        - .collect:source
    stage: collect
    needs: []
    rules:
        *rules_nightly
    before_script:
        - *deploy_variables
        - export TARNAME="VC-${DATETIME}-${VERSHORT}.${SHA}-source.tar.gz"

.macos_move_package: &macos_move_package
    - ninja package
    - mv VC*.dmg ../
    - mv VC*.tar.gz ../

.collect:package:macos:
    extends: .build
    variables:
        MACOSX_DEPLOYMENT_TARGET: "10.13"
        Qt5_DIR: "/usr/local/opt/qt5/lib/cmake/Qt5"
        EXTRA_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DVC_PREBUILT_LIBS=ON -DVC_BUILD_ACVD=ON -DVC_BUILD_EXAMPLES=OFF -DVC_BUILD_TESTS=OFF"
    before_script:
        - export VC_DEPS_PATH="$CI_PROJECT_DIR/vc-deps"
        - export CMAKE_CMD="cmake -GNinja $EXTRA_CMAKE_FLAGS .."
        - git submodule update --init
        - cd vc-deps/
        - mkdir -p build/
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL_LIBS=ON -DVCDEPS_BUILD_ACVD=OFF ..
        - ninja
        - cd ../../
        - export SDKROOT="$CI_PROJECT_DIR/vc-deps/build/osx-sdk-prefix/SDKs/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk/"
    script:
        - *build_script
        - *macos_move_package
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - ./*.dmg
            - ./*.tar.gz
        expire_in: 1 day
    tags:
        - deploy
        - osx
        - qt5

collect:release:macos:
    extends:
        - .collect:package:macos
    stage: collect
    rules:
        *rules_release

collect:nightly:macos:
    extends:
        - .collect:package:macos
    stage: collect
    rules:
        *rules_nightly
    variables:
        EXTRA_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DVC_VERSION_DATESTAMP=ON -DVC_PREBUILT_LIBS=ON -DVC_BUILD_ACVD=ON -DVC_BUILD_EXAMPLES=OFF -DVC_BUILD_TESTS=OFF"

.deploy:
    variables:
        REMOTE: "volume-cartographer"
    script:
        - mkdir -p ${BUILD_DIR}
        - cp VC*.dmg ${BUILD_DIR}
        - cp VC*.tar.gz ${BUILD_DIR}
        - rclone -v copy ${BUILD_DIR}/ ${REMOTE}:${REMOTE_DIR}/${BUILD_DIR}/
    tags:
        - rclone

deploy:release:
    extends:
        - .deploy
    stage: deploy
    needs: ["collect:release:source", "collect:release:macos"]
    rules:
        *rules_release
    variables:
        REMOTE_DIR: "releases"
    before_script:
        - *deploy_variables
        - export BUILD_DIR=v${VERSION}
    environment:
        name: production

deploy:release:tag:
    stage: deploy
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    needs: ["collect:release:source", "collect:release:macos"]
    rules:
        *rules_release
    script:
        - echo 'Creating release $CI_COMMIT_TAG'
    release:
        name: 'Release $CI_COMMIT_TAG'
        tag_name: '$CI_COMMIT_TAG'
        description: 'Auto-created release $CI_COMMIT_TAG'
        ref: '$CI_COMMIT_TAG'
    tags:
        - docker

deploy:nightly:
    extends:
        - .deploy
    stage: deploy
    needs: ["collect:nightly:source", "collect:nightly:macos"]
    rules:
        *rules_nightly
    variables:
        REMOTE_DIR: "nightlies"
    before_script:
        - *deploy_variables
        - export BUILD_DIR=${DATETIME}-${VERSHORT}.${SHA}
    environment:
        name: development
