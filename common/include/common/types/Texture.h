// VC Texture
// Object to store texture information generated by the algorithms in vc_texturing
// Created by Seth Parker on 10/20/15.
#pragma once

#include <opencv2/opencv.hpp>

#include "common/vc_defines.h"
#include "common/types/Metadata.h"
#include "common/types/UVMap.h"
#include "common/types/PerPixelMap.h"

namespace volcart {
    class Texture {
    public:

        Texture();
        Texture(std::string path);

        // Get metadata
        volcart::Metadata metadata() const{ return _metadata; };

        std::string id() const { return _metadata.get<std::string>("id"); };
        int width() const { return _width; };
        int height() const{ return _height; };
        size_t numberOfImages() const { return _images.size(); };
        bool hasImages() const { return _images.size() > 0; };
        bool hasMap() const { return _uvMap.size() > 0; };

        // Get/Set UV Map
        const volcart::UVMap& uvMap() const { return _uvMap; };
        volcart::UVMap& uvMap() { return _uvMap; };
        void uvMap(volcart::UVMap uvMap) { _uvMap = uvMap; };

        // Get/Add Texture Image
        cv::Mat getImage(int id) const { return _images[id]; };
        void addImage(cv::Mat image);

        // Return the intensity for a Point ID
        double intensity(int point_ID, int image_ID = 0);

        // Extra Metadata
        void    setMask( cv::Mat m ) { _PerPixelMask = m; };
        cv::Mat getMask() { return _PerPixelMask; };

        void         setMap( PerPixelMap m ) { _PerPixelMapping = m; };
        PerPixelMap  getMap() { return _PerPixelMapping; };

    private:
        volcart::Metadata _metadata;

        boost::filesystem::path _path;
        int _width, _height;
        std::vector<cv::Mat> _images;
        volcart::UVMap _uvMap;

        cv::Mat       _PerPixelMask;
        PerPixelMap   _PerPixelMapping;
    };
} // volcart
